<Page x:Class="PL.TaskPages.TaskPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:bl="clr-namespace:BO;assembly=BL"  
      xmlns:controls="clr-namespace:PL.CustomControls"
      xmlns:local="clr-namespace:PL.TaskPages"
      mc:Ignorable="d" 
      d:DesignHeight="600" d:DesignWidth="1050"
      Title="TaskPage"      
      DataContext="{Binding RelativeSource={RelativeSource Mode=Self}}">

    <Page.Resources>
        <ResourceDictionary Source="/Themes/Dark.xaml"/>
    </Page.Resources>

    <Grid Background="Transparent">
        <Grid.Resources>
            <DataTemplate x:Key="TaskInListTemplate" DataType="bl:TaskInList" >
                <Border CornerRadius="3" Background="LightGray" HorizontalAlignment="Stretch">
                    <Grid  HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="70"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="{Binding Id}" VerticalAlignment="Center"/>
                        <TextBlock Grid.Column="1" Text="{Binding Alias}" VerticalAlignment="Center" Width="auto" HorizontalAlignment="Stretch"/>
                        <Button Background="Gray" Height="20" Width="40" Content="Add" FontSize="11" VerticalContentAlignment="Center" Grid.Column="2" Click="AddDependency_BtnClick">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Opacity" Value="0.4"/>
                                            <Setter Property="Background" Value="DarkGray"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </Grid>
                </Border>
            </DataTemplate>
            <ControlTemplate x:Key="TextBoxControlTemplate" TargetType="{x:Type TextBox}">

                <Border VerticalAlignment="Center" Name="border" Background="{DynamicResource TextBoxColor1}" MinHeight="35" MaxHeight="40" CornerRadius="4" BorderThickness="1" BorderBrush="Black">

                    <TextBox 
                         Name="myTextBox" 
                         IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                         Background="Transparent"     
                         BorderThickness="0"
                         FontSize="17"  
                         MaxLength="{TemplateBinding MaxLength}"
                         Height="{TemplateBinding Height}"
                         MinWidth="70"
                         VerticalAlignment="Center"                                             
                         HorizontalAlignment="Center"    
                         HorizontalContentAlignment="Center" 
                         FontFamily="Global Sans Serif"
                         Text ="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">

                    </TextBox>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBoxBorderColorOnFocus1}"/>
                        <Setter Property="BorderThickness" TargetName="border" Value="2"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True" SourceName="myTextBox">
                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBoxBorderColorOnFocus1}"/>
                        <Setter Property="BorderThickness" TargetName="border" Value="2"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsFocused" Value="False" SourceName="myTextBox"/>
                            <Condition Property="Text" Value="{x:Null}" SourceName="myTextBox"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Text" TargetName="myTextBox" Value="Name"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="5*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.3*"/>
            <ColumnDefinition Width="4*"/>
            <ColumnDefinition Width="0.3*"/>
        </Grid.ColumnDefinitions>
        <Border Grid.RowSpan="3" Grid.Column="1" Background="{DynamicResource Backround4}" CornerRadius="15" BorderBrush="Black">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="1.7*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="1.3*"/>
                    <RowDefinition Height="100"/>
                    <RowDefinition Height="50"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.6*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="0.6*"/>
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column="0" Grid.RowSpan="2" Margin="20" Source="/Graphics/Icons/task1.png"/>
                    <Border CornerRadius="10" Margin="0,20,45,20" Grid.RowSpan="2" Grid.Column="1" Background="Transparent">
                        <!--top page dates information-->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.8*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.Resources>
                                <Style TargetType="Label">
                                    <Setter Property="VerticalAlignment" Value="Bottom"/>
                                    <Setter Property="Foreground" Value="White"/>
                                    <Setter Property="FontSize" Value="12"/>
                                    <Setter Property="FontWeight" Value="Bold"/>
                                </Style>
                            </Grid.Resources>
                            <StackPanel HorizontalAlignment="Left" >
                                
                                <!--status-->
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Status:"/>
                                    <Label Content="{Binding Task.Status, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"/>
                                </StackPanel>
                                <Separator Foreground="Black" Width="250"/>
                                <!--start date-->
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Start Date:"/>
                                    <Label >
                                        <Label.Style>
                                            <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                                                <Setter Property="Content" Value="{Binding Task.StartDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Task.StartDate, Converter={StaticResource ConvertNullToBool}}" Value="false">
                                                        <Setter Property="Content"  Value="N/A"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                </StackPanel>
                                <Separator Foreground="Black" Width="250"/>
                                <!--end date-->
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Completion Date:"/>
                                    <Label >
                                        <Label.Style>
                                            <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                                                <Setter Property="Content" Value="{Binding Task.CompleteDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Task.CompleteDate, Converter={StaticResource ConvertNullToBool}}" Value="false">
                                                        <Setter Property="Content"  Value="N/A"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                </StackPanel>
                                <Separator Foreground="Black" Width="250"/>
                            </StackPanel>
                            <StackPanel HorizontalAlignment="Left" Grid.Column="1">
                                <!--scheduled date-->
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Scheduled Date:"/>
                                    <Label Name="StartDateLabel">
                                        <Label.Style>
                                            <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                                                <Setter Property="Content" Value="{Binding Task.ScheduledDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Task.ScheduledDate, Converter={StaticResource ConvertNullToBool}}" Value="false">
                                                        <Setter Property="Content"  Value="N/A"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                </StackPanel>
                                <Separator Foreground="Black" Width="250"/>
                                <!--deadline date-->
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Deadline Date:"/>
                                    <Label >
                                        <Label.Style>
                                            <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                                                <Setter Property="Content" Value="{Binding Task.DeadlineDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Task.DeadlineDate, Converter={StaticResource ConvertNullToBool}}" Value="false">
                                                        <Setter Property="Content"  Value="N/A"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                </StackPanel>
                                <Separator Foreground="Black" Width="250"/>
                                <!--forcast date-->
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Planned Completion Date:"/>
                                    <Label>
                                        <Label.Style>
                                            <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                                                <Setter Property="Content" Value="{Binding Task.ForecastDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Task.ForecastDate, Converter={StaticResource ConvertNullToBool}}" Value="false">
                                                        <Setter Property="Content"  Value="N/A"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                </StackPanel>
                                <Separator Foreground="Black" Width="250"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </Grid>
                
                <!--alias-->
                <StackPanel VerticalAlignment="Center" Margin="15,0" Grid.Column="1" Grid.Row="1">
                    <Label VerticalContentAlignment="Bottom" Content="Name/Alias:"/>
                    <TextBox 
                         Template="{StaticResource TextBoxControlTemplate}"
                         Text="{Binding Task.Alias, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                    </TextBox>
                </StackPanel>

                <!--description-->
                <StackPanel Name="DescriptionPanel" VerticalAlignment="Center" Margin="15,0" Grid.Column="2" Grid.Row="1">
                    <Label VerticalContentAlignment="Bottom" Content="Description:"/>
                    <TextBox 
                          Name="DesTextBox"                          
                          Template="{StaticResource TextBoxControlTemplate}"
                          Text="{Binding Task.Description, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                    </TextBox>
                </StackPanel>

                <!--Deliverables-->
                <StackPanel VerticalAlignment="Center" Margin="15,0" Grid.Column="1" Grid.Row="2">
                    <Label VerticalContentAlignment="Bottom" Content="Deliverables:"/>
                    <TextBox                         
                          Template="{StaticResource TextBoxControlTemplate}"
                          Text="{Binding Task.Deliverables, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                    </TextBox>
                </StackPanel>

                <!--Remarks-->
                <StackPanel VerticalAlignment="Center" Margin="15,0" Grid.Column="2" Grid.Row="2">
                    <Label VerticalContentAlignment="Bottom" Content="Remarks:"/>
                    <TextBox                         
                          Template="{StaticResource TextBoxControlTemplate}"
                          Text="{Binding Task.Remarks, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                    </TextBox>
                </StackPanel>

                <!--required effort time-->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1"  Grid.Row="3">
                    <!--required days-->
                    <StackPanel VerticalAlignment="Center" Margin="15,0" >
                        <Label VerticalContentAlignment="Bottom" Content="Days Required:"/>
                        <DatePickerTextBox
                            HorizontalAlignment="Left"
                              Width="130"
                              Template="{StaticResource TextBoxControlTemplate}"                            
                              Text="{Binding Task.RequiredEffortTime, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true, UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="EnteredKey_RequiredDaysFieldChanged">
                        </DatePickerTextBox>
                    </StackPanel>
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="3">
                <!--task complexity-->
                    <StackPanel VerticalAlignment="Center" Margin="15,0">
                        <Label VerticalContentAlignment="Bottom" Content="Level:"/>
                        <ComboBox 
                            Width="210"
                            Margin="0,0,0,0"
                            Background="{DynamicResource TextBoxColor1}"
                            Foreground="Black"
                            VerticalAlignment="Center"
                            Style="{StaticResource DefaultComboBoxStyle}"
                            SelectedValue="{Binding Task.Complexity, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"
                            ItemsSource="{Binding Source={StaticResource EngineerExperienceEnumCollection}}" 
                            SelectionChanged="ComplexitySelectionCHanged_ComboBoxSelectionChanged">
                        </ComboBox>
                    </StackPanel>
                </StackPanel>

                <!--assign engineer-->
                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="15,0" Grid.Column="1" Grid.Row="4" Grid.ColumnSpan="1">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <CheckBox Name="AssignEngineerCheckBox" Grid.Row="6" Grid.Column="0" VerticalAlignment="Center" Margin="0,0,0,0" 
                            IsChecked="{Binding Task.Engineer, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true, Converter={StaticResource ConvertNullEngineerInTaskToBool}}"/>
                        <Label VerticalContentAlignment="Bottom" Content="Assign Engineer:"/>
                    </StackPanel>
                    <TextBox 
                         Name="textBox" Width="200"
                         Template="{DynamicResource TextBoxControlTemplate}"
                         Text="{Binding Task.Engineer.Name, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=true, ValidatesOnExceptions=true}"
                         IsEnabled="{Binding ElementName= AssignEngineerCheckBox, Path=IsChecked}">
                    </TextBox>
                    <ComboBox 
                        Width="200"
                         Name="tasksComboBox"
                         Margin="0,0,0,0"
                         Background="{DynamicResource TextBoxColor1}" 
                         Foreground="Black"
                         VerticalAlignment="Center"
                         SelectedValue="{Binding Task.Engineer, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}"
                         ItemsSource="{Binding AvailableEngineers}">
                        <ComboBox.Style >
                            <Style TargetType="ComboBox" BasedOn="{StaticResource DefaultComboBoxStyle}">
                                <Style.Triggers>
                                    <MultiDataTrigger >
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsEnabled, ElementName=textBox}" Value="True"/>
                                            <!--<Condition Binding="{Binding IsFocused, ElementName=textBox}" Value="True"/>-->
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </MultiDataTrigger>
                                    <DataTrigger Binding="{Binding IsEnabled, ElementName=textBox}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                </StackPanel>

                <!--add Dependencies popup window-->
                <Border x:Name="AddDependenciesBorder" Margin="100,0" Panel.ZIndex="10" Grid.Column="1" Grid.Row="1" Grid.RowSpan="4" Grid.ColumnSpan="2" Background="{DynamicResource Backround4}" CornerRadius="10" BorderBrush="Black" BorderThickness="2" Visibility="Collapsed">
                    <Border.Effect>
                        <DropShadowEffect ShadowDepth="10" BlurRadius="5" Opacity="0.5" Color="Black"/>
                    </Border.Effect>
                    <!--add dependencies popup-->
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.ColumnSpan="2" VerticalAlignment="Top" HorizontalContentAlignment="Center" Content="Add Dependent Tasks" Foreground="White" Margin="5"/>
                        <!--go back button-->
                        <controls:IconButton 
                                Grid.Row="0" Height="15" Width="10" IconHeight="70" Margin="10" Background="White"
                                Style="{DynamicResource IconButton1}" VerticalAlignment="Top" HorizontalAlignment="Left"
                                Content="Back" Icon="/Graphics/Icons/backArrow1.png" Click="CloseDependenciesWindow_BtnClick">
                        </controls:IconButton>
                        <!--list view for adding dependencies-->
                        <ListView  Margin="5,35,5,5" Grid.RowSpan="2" Grid.ColumnSpan="2" 
                                   ItemsSource="{Binding AvailableDependencies, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                   ItemTemplate="{StaticResource TaskInListTemplate}"
                                   SelectionMode="Extended" HorizontalContentAlignment="Stretch">

                        </ListView>
                    </Grid >
                </Border>
                <!--view dependencies popup window-->
                <Border x:Name="CurrentDependenciesBorder" Margin="100,0" Panel.ZIndex="10" Grid.Column="1" Grid.Row="1" Grid.RowSpan="4" Grid.ColumnSpan="2" Background="{DynamicResource Backround4}" CornerRadius="10" BorderBrush="Black" BorderThickness="2" Visibility="Collapsed">
                    <Border.Resources>
                        <DataTemplate x:Key="TaskInListViewTemplate" DataType="bl:TaskInList" >
                            <Border CornerRadius="3" Background="LightGray" HorizontalAlignment="Stretch">
                                <Grid  HorizontalAlignment="Stretch">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="70"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Text="{Binding Id}" VerticalAlignment="Center"/>
                                    <TextBlock Grid.Column="1" Text="{Binding Alias}" VerticalAlignment="Center" Width="auto" HorizontalAlignment="Stretch"/>
                                    <Button Background="Gray" Height="20" Width="50" Content="Remove" FontSize="11" VerticalContentAlignment="Center" Grid.Column="2" Click="RemoveDependency_BtnClick">
                                        <Button.Style>
                                            <Style TargetType="Button">
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Opacity" Value="0.4"/>
                                                        <Setter Property="Background" Value="DarkGray"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>
                                </Grid>
                            </Border>
                        </DataTemplate>
                    </Border.Resources>
                    <Border.Effect>
                        <DropShadowEffect ShadowDepth="10" BlurRadius="5" Opacity="0.5" Color="Black"/>
                    </Border.Effect>
                    <!--actual dependencies popup-->
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.ColumnSpan="2" VerticalAlignment="Top" HorizontalContentAlignment="Center" Content="Current Dependent Tasks" Foreground="White" Margin="5"/>
                        <!--go back button-->
                        <controls:IconButton 
                                Grid.Row="0" Height="15" Width="10" IconHeight="70" Margin="10" Background="White"
                                Style="{DynamicResource IconButton1}" VerticalAlignment="Top" HorizontalAlignment="Left"
                                Content="Back" Icon="/Graphics/Icons/backArrow1.png" Click="CloseDependenciesWindow_BtnClick">
                        </controls:IconButton>
                        <ListView  Margin="5,35,5,5" Grid.RowSpan="2" Grid.ColumnSpan="2" 
                                ItemsSource="{Binding CurrentTaskDependencies, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
                                ItemTemplate="{StaticResource TaskInListViewTemplate}"
                                SelectionMode="Extended" HorizontalContentAlignment="Stretch">

                        </ListView>
                    </Grid>
                </Border>
                <!--buttons for handling dependencies-->
                <StackPanel Orientation="Vertical" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="5">
                    <Label VerticalContentAlignment="Bottom" HorizontalAlignment="Center" Content="Dependencies:" Foreground="White" Height="25"/>
                    <Border CornerRadius="6" Background="{StaticResource Backround1}" Height="50" Width="200" >
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="4" BlurRadius="5" Opacity="0.5" Color="Black"/>
                        </Border.Effect>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" >
                            <Button Style="{StaticResource ButtonStyle1}" Background="White" Content="View" Foreground="Black" FontSize="15" FontWeight="Bold" Width="70" Height="30" Click="ShowViewDependenciesWindow_BtnClick"/>
                            <Button Style="{StaticResource ButtonStyle1}" Background="White" Content="Add" Foreground="Black" FontSize="15" FontWeight="Bold" Width="70" Height="30" Click="ShowAddDependenciesWindow_BtnClick"/>
                        </StackPanel>
                    </Border>
                </StackPanel>
        

                <!--dates-->
                <StackPanel Visibility="Collapsed" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" Height="70" Margin="15,0" Grid.Column="1" Grid.Row="5" Grid.ColumnSpan="2">
                    <!--creation date-->
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Bottom">
                        <Label  VerticalContentAlignment="Bottom" FontSize="10" Content="Creation Date:"/>
                        <DatePicker
                            IsEnabled="False"
                            BorderThickness="0"
                            Height="35"
                            SelectedDate="{Binding Task.CreatedAtDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                            <!--<DatePicker.Template>
                                <ControlTemplate TargetType="DatePicker">
                                    <TextBox Template="{DynamicResource TextBoxControlTemplate }"
                                             Text="{TemplateBinding SelectedDate}"/>
                                </ControlTemplate>
                            </DatePicker.Template>-->
                        </DatePicker>
                    </StackPanel>
                    <!--planned start date-->
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="10,0">
                        <Label HorizontalAlignment="Left"  VerticalContentAlignment="Bottom" FontSize="10" Content="Estimated Start Date:"/>
                        <DatePicker
                            IsEnabled="False"
                            BorderThickness="0"
                            Height="35"
                            SelectedDate="{Binding Task.ScheduledDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                        </DatePicker>
                    </StackPanel>
                    <!--planned end date-->
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="10,0">
                        <Label  VerticalContentAlignment="Bottom" FontSize="10" Content="Estimated End Date:"/>
                        <DatePicker
                            IsEnabled="False"
                            BorderThickness="0"
                            Height="35"
                            SelectedDate="{Binding Task.ForecastDate, Mode=TwoWay, NotifyOnValidationError=true, ValidatesOnExceptions=true}">
                        </DatePicker>
                    </StackPanel>
                </StackPanel>

                <!--Go Back button-->                
                 <controls:IconButton 
                     Grid.Row="0" Background="White" 
                     Height="30"
                     Width="30"
                     IconHeight="70"
                     Style="{DynamicResource IconButton1}"  
                     Content="Back" Click="GoBack_BtnClick" 
                     Icon="/Graphics/Icons/backArrow1.png"/>
                <!--Button for adding\updating-->
                <Button 
                     Style="{DynamicResource ButtonStyle1}"
                     DataContext="{Binding Engineer}"
                     Content="Save" FontSize="15" Background="#FF414243" Foreground="White" VerticalContentAlignment="Center"
                     Grid.Column="3" Grid.Row="0" Padding="8" Width="75" Height="40"  Click="AddOrUpdateTask_btnClick">
                </Button>
                <!--Button for reseting changes-->
                <Button 
                     Style="{DynamicResource ButtonStyle1}"
                     Content="Reset Changes" Background="#FF414243" Foreground="White" FontSize="12" Margin="0"
                     VerticalContentAlignment="Center" Width="95" Height="30" HorizontalContentAlignment="Center" Grid.Column="1" Grid.Row="7"
                     Click="ResetChanges_btnClick"/>
            </Grid>
        </Border>

    </Grid>
</Page>
