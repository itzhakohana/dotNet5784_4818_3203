<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"                    
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    xmlns:d="clr-namespace:DataTemplates"
    xmlns:bl="clr-namespace:BO;assembly=BL"
    xmlns:controls="clr-namespace:PL.CustomControls">

    <!--style for a tab item-->
    <Style x:Key="CustomTabItemStyle" TargetType="TabItem">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <Border x:Name="Border" BorderThickness="1" CornerRadius="10" Margin="5" Padding="10">
                            <ContentPresenter x:Name="ContentSite"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource defaultSideNavigationBarBackround}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Gray"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource defaultSideNavigationBarBackround}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--default lable style-->
    <Style TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource fontColor1}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
    </Style>

    <!--style for main menu buttons-->
    <Style x:Key="mainButtons" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Margin" Value="2,3"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="Trebuchet MS"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="BorderThickness" Value="2,2"/>
        <Setter Property="BorderBrush" Value="#FF94A4EA"/>
    </Style>

    <!--default horizontal style for menu navigation button -->
    <Style x:Key="MainNavButtonHorizontal" TargetType="{x:Type controls:NavigationButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource fontColor1}"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="MaxHeight" Value="120"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NavigationButton}">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="Black" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="35"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Grid.ColumnSpan="2" Fill="Transparent" Stroke="Black" StrokeThickness="0"/>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Grid.Column="1" Text="{TemplateBinding Title}"/>
                            <Image Grid.Column="0" Margin="5,6,-3,6" Source="{TemplateBinding Icon}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource IsMouseOverColor1}"/>
                            <!--<Setter Property="Opacity" TargetName="border" Value="0.7"/>-->
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource IsMouseOverColor1}"/>
                            <!--<Setter Property="Opacity" TargetName="border" Value="0.7"/>-->
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--default vertical style for menu navigation button -->
    <Style x:Key="MainNavButtonVertical" TargetType="{x:Type controls:NavigationButton}">
        <Setter Property="Background" Value="{StaticResource Backround1}"/>
        <Setter Property="Foreground" Value="{StaticResource fontColor1}"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value=" 10"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="MaxHeight" Value="120"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NavigationButton}">
                    <Border x:Name="border" 
            Background="#363636" 
            BorderBrush="Black" 
            BorderThickness="{TemplateBinding BorderThickness}" 
            CornerRadius="8">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="35"/>
                            </Grid.RowDefinitions>
                            <Rectangle Grid.RowSpan="2" Fill="Transparent" Stroke="Black" StrokeThickness="0"/>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Grid.Row="1" Text="{TemplateBinding Title}"/>
                            <Image Grid.Row="0" MaxHeight="60" Margin="0,8,0,0" Source="{TemplateBinding Icon}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#616161"/>
                            <!--<Setter Property="Opacity" TargetName="border" Value="0.7"/>-->
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for text button with rounded borders-->
    <Style x:Key="ButtonStyle1" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource Backround1}"/>
        <Setter Property="Foreground" Value="{StaticResource fontColor1}"/>
        <Setter Property="FontSize" Value="40"/>
        <Setter Property="Margin" Value=" 10"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                     x:Name="border"
                     BorderBrush="Black"
                     CornerRadius="10"
                     Background="{TemplateBinding Background}"
                     Height="{TemplateBinding Height}"
                     Width="{TemplateBinding Width}">
                        <TextBlock 
                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                         HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                         FontSize="{TemplateBinding FontSize}"
                         FontFamily="{TemplateBinding FontFamily}"
                         Foreground="{TemplateBinding Foreground}"
                         Background="Transparent"
                         Text="{TemplateBinding Content}">
                        </TextBlock>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.75"/>
                            <Setter Property="BorderThickness" Value="1" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for icon button -->
    <Style x:Key="IconButton1" TargetType="{x:Type controls:IconButton}">
        <Setter Property="Background" Value="{StaticResource Backround1}"/>
        <Setter Property="Foreground" Value="{StaticResource fontColor1}"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MaxHeight" Value="200"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MaxWidth" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconButton}">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Image Height="{TemplateBinding IconHeight}" Width="{TemplateBinding IconWidth}" Source="{TemplateBinding Icon}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="white"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for transparent icon button -->
    <Style x:Key="TransparentIconButton1" TargetType="{x:Type controls:IconButton}">
        <Setter Property="Background" Value="{StaticResource Backround1}"/>
        <Setter Property="Foreground" Value="{StaticResource fontColor1}"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Height" Value="{Binding Height}"/>
        <Setter Property="Width" Value="{Binding Width}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MaxHeight" Value="200"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MaxWidth" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconButton}">
                    <Border x:Name="border" CornerRadius="3" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Image Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Source="{TemplateBinding Icon}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for toggle Button icon button -->
    <Style x:Key="ToggleIconButton1" TargetType="{x:Type controls:IconToggleButton}">
        <Setter Property="Background" Value="{StaticResource Backround1}"/>
        <Setter Property="Foreground" Value="{StaticResource fontColor1}"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MaxHeight" Value="200"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MaxWidth" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconToggleButton}">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Image Source="{TemplateBinding Icon}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="white"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="white"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="white"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for toggle Button icon button with transparent background-->
    <Style x:Key="ToggleIconButtonTransparent" TargetType="{x:Type controls:IconToggleButton}" BasedOn="{StaticResource ToggleIconButton1}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconToggleButton}">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Image Source="{TemplateBinding Icon}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                            <!--<Setter Property="BorderThickness" TargetName="border" Value="0"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for toggle Button icon button with transparent background with no IsChecked visual-->
    <Style x:Key="ToggleIconButtonTransparent_NoIsCheckedVisual" TargetType="{x:Type controls:IconToggleButton}" BasedOn="{StaticResource ToggleIconButtonTransparent}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconToggleButton}">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Image Source="{TemplateBinding Icon}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--style for toggle Button icon button with transparent background and flashing image with no IsChecked visual-->
    <Style x:Key="FlashingToggleIconButtonTransparent_NoIsCheckedVisual" TargetType="{x:Type controls:IconToggleButton}" BasedOn="{StaticResource ToggleIconButtonTransparent_NoIsCheckedVisual}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconToggleButton}">
                    <Border x:Name="border" CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <Image x:Name="flashingImage" Source="{TemplateBinding Icon}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            <Setter Property="Opacity" TargetName="border" Value="0.3"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard>
                                <Storyboard RepeatBehavior="Forever" AutoReverse="True">
                                    <!--<DoubleAnimation
                                        Storyboard.TargetName="flashingImage"
                                        Storyboard.TargetProperty="Opacity"                                        
                                        From="1.0"
                                        To="0.3"
                                        Duration="0:0:0.7"/>-->
                                    <DoubleAnimation
                                        Storyboard.TargetName="flashingImage"
                                        Storyboard.TargetProperty="Width"                                        
                                        From="30"
                                        To="50"
                                        Duration="0:0:1"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="flashingImage"
                                        Storyboard.TargetProperty="Height"                                        
                                        From="30"
                                        To="50"
                                        Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--style for combo box-->
    <Style x:Key="DefaultComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="#FF717171"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{StaticResource fontColor1}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="MinWidth" Value="90"/>
        <Setter Property="MaxWidth" Value="250"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border 
                         Name="MainBorder"
                         Focusable="False"
                         Background="{TemplateBinding Background}"
                         BorderThickness="1" 
                         BorderBrush="Black" 
                         CornerRadius="6">
                        <Grid Focusable="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="30"/>
                            </Grid.ColumnDefinitions>
                            <ToggleButton 
                                 Focusable="True"
                                 Name="ToggleButton"                                     
                                 Grid.Column="1"                                
                                 IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Background="{StaticResource Backround1}"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" CornerRadius="0,6,6,0">
                                            <Image Name="ExpanderIcon" Margin="5" Source="/Graphics/Icons/expander arrow.png"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="ExpanderIcon" Property="RenderTransform">
                                                    <Setter.Value>
                                                        <ScaleTransform  ScaleX="1" ScaleY="-1" CenterY="10"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <ContentPresenter 
                             x:Name="ContentSite"
                             Content="{TemplateBinding SelectionBoxItem}"
                             ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                             ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                             Margin="3,0,0,0"
                             VerticalAlignment="Center"
                             HorizontalAlignment="Center">
                            </ContentPresenter>
                            <Popup x:Name="Popup"
                                Placement="Bottom"                                   
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="False"
                                Focusable="False"
                                PopupAnimation="Slide">
                                <Grid 
                                   x:Name="DropDown"
                                   SnapsToDevicePixels="True"  
                                   Background="{StaticResource Backround1}"
                                   MinWidth="{TemplateBinding ActualWidth}"
                                   MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <!--<Border 
                                         x:Name="DropDownBorder"
                                         Background="Transparent"
                                         BorderThickness="1"
                                         BorderBrush="Black"/>-->
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MainBorder" Property="Background" Value="gray"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource UnmodifiableFieldColor}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>

                        <!-- Trigger to extend the Popup when the ToggleButton is checked -->
                        <!--<Trigger Property="IsDropDownOpen" Value="True">
                         <Setter TargetName="DropDownBorder" Property="Height" Value="{Binding ElementName=ToggleButton, Path=ActualHeight}" />
                     </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Custom style for password box-->
    <Style x:Key="PasswordBoxStyle1" TargetType="PasswordBox">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="17"/>
        <!--<Setter Property="FontFamily" Value="/Graphics/Fonts/Password Regular.ttf #Password"/>-->
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Background" Value="#FF717171"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border x:Name="Border" Height="{TemplateBinding Height}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <StackPanel Orientation="Vertical">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                            <Separator HorizontalAlignment="Stretch" Background="White"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="LightBlue"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="DodgerBlue"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Custom style for text box-->
    <Style x:Key="PasswordTextBoxStyle1" TargetType="controls:CustomTextBox">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="17"/>
        <!--<Setter Property="FontFamily" Value="/Graphics/Fonts/Password Regular.ttf #Password"/>-->
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Background" Value="#FF717171"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CustomTextBox">
                    <Border x:Name="Border" Height="{TemplateBinding Height}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <StackPanel Orientation="Vertical">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                            <Separator HorizontalAlignment="Stretch" Background="White"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsFocused" Value="True">
                        <Setter TargetName="Border" Property="Background" Value="LightBlue"/>
                        <Setter TargetName="Border" Property="BorderBrush" Value="DodgerBlue"/>
                    </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Custom text box style 1--> 
    <Style x:Key="TextBoxStyle1" TargetType="controls:CustomTextBox">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Background" Value="#FF717171"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CustomTextBox">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="LightBlue"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="DodgerBlue"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource UnmodifiableFieldColor}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource UnmodifiableFieldColor}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource UnmodifiableFieldColor}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource UnmodifiableFieldColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Custom text box style 2-->
    <Style  x:Key="TextBoxStyle2" TargetType="controls:CustomTextBox">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="Background" Value="#FF717171"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CustomTextBox">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <Grid>
                            <TextBlock x:Name="HeaderTextBlock" Text="{TemplateBinding HeaderText}" VerticalAlignment="Center" Margin="5,0,0,0"
                               Visibility="Collapsed" Foreground="Black" Opacity="0.5"/>
                            <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="LightBlue"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="DodgerBlue"/>
                            <Setter TargetName="HeaderTextBlock" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HeaderTextBlock" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--style for icon in list -->
    <Style x:Key="IconPictureDisplayStyle" TargetType="{x:Type controls:ImageListItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource fontColor1}"/>
        <Setter Property="FontFamily" Value="Bahnschrift SemiLight"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageListItem}">
                    <Border Width="70" Height="70" x:Name="border" BorderBrush="Black" CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Image Grid.Column="0" Margin="5" Source="{TemplateBinding Image}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="3"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Backround7}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderThickness" TargetName="border" Value="3"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Backround7}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>